JavaPathfinder core system v8.0 (rev c4975b695986b352d3434c73ed638255158b5598) - (C) 2005-2014 United States Government. All rights reserved.


====================================================== system under test
ChatServer.main("2")+ChatClient.main()+ChatClient.main()

====================================================== search started: 4/30/19 10:09 AM
No more threads
Client 0 connected.
No more threads
Server shutting down.
Client 0 connected.

====================================================== error 1
gov.nasa.jpf.vm.NotDeadlockedProperty
deadlock encountered:
  thread java.lang.Thread:{id:1,name:main,status:WAITING,priority:5,isDaemon:false,lockCount:0,suspendCount:0}
  thread java.lang.Thread:{id:2,name:main,status:WAITING,priority:5,isDaemon:false,lockCount:0,suspendCount:0}


====================================================== trace #1
------------------------------------------------------ transition #0 thread: 0
gov.nasa.jpf.vm.choice.ThreadChoiceFromSet {id:"ROOT" ,1/1,isCascaded:false}
      [3168 insn w/o sources]
  ChatServer.java:64             : public class ChatServer {
      [2 insn w/o sources]
  ChatServer.java:64             : public class ChatServer {
  ChatServer.java:65             : static HashMap<Integer, Worker> workers = new HashMap<>();
      [10 insn w/o sources]
  ChatServer.java:65             : static HashMap<Integer, Worker> workers = new HashMap<>();
  ChatServer.java:1              : import java.io.BufferedReader;
      [1 insn w/o sources]
  ChatServer.java:114            : if (args.length == 0) {
  ChatServer.java:117            : new ChatServer(Integer.parseInt(args[0]));
      [2 insn w/o sources]
  ChatServer.java:117            : new ChatServer(Integer.parseInt(args[0]));
  ChatServer.java:69             : public ChatServer(int maxServ) {
      [1 insn w/o sources]
  ChatServer.java:67             : int n = 0;
  ChatServer.java:70             : int port = 4444;
  ChatServer.java:71             : boolean init = true;
  ChatServer.java:73             : ServerSocket servsock = null;
  ChatServer.java:75             : BlockingQueue<Runnable> wQueue = new LinkedBlockingQueue();
      [207 insn w/o sources]
  ChatServer.java:75             : BlockingQueue<Runnable> wQueue = new LinkedBlockingQueue();
  ChatServer.java:76             : RejectedExecutionHandler rH = new RejectedExecutionHandler(){
      [1 insn w/o sources]
  ChatServer.java:76             : RejectedExecutionHandler rH = new RejectedExecutionHandler(){
  ChatServer.java:83             : ThreadPoolExecutor executor = new ThreadPoolExecutor(10, 0, 10, TimeUnit.SECONDS, wQueue, rH);
      [258 insn w/o sources]
  ChatServer.java:83             : ThreadPoolExecutor executor = new ThreadPoolExecutor(10, 0, 10, TimeUnit.SECONDS, wQueue, rH);
  env/java/util/concurrent/ThreadPoolExecutor.java:20 : RejectedExecutionHandler handler) {
      [1 insn w/o sources]
  env/java/util/concurrent/ThreadPoolExecutor.java:22 : this.maximumPoolSize = maximumPoolSize;
  env/java/util/concurrent/ThreadPoolExecutor.java:23 : this.handler = handler;
  env/java/util/concurrent/ThreadPoolExecutor.java:24 : }
  ChatServer.java:83             : ThreadPoolExecutor executor = new ThreadPoolExecutor(10, 0, 10, TimeUnit.SECONDS, wQueue, rH);
  ChatServer.java:86             : servsock = new ServerSocket(port);
      [81 insn w/o sources]
  ChatServer.java:86             : servsock = new ServerSocket(port);
  ChatServer.java:87             : while (maxServ-- != 0) {
  ChatServer.java:88             : sock = servsock.accept();
      [141 insn w/o sources]
------------------------------------------------------ transition #1 thread: 1
nas.java.net.choice.NasThreadChoice {id:"BLOCKING_ACCEPT" ,1/2,isCascaded:false}
      [3168 insn w/o sources]
  ChatClient.java:13             : static int currID = 0;
  ChatClient.java:1              : /* $Id: ChatClient.java 723 2009-09-24 07:48:58Z cartho $ */
      [1 insn w/o sources]
  ChatClient.java:16             : new ChatClient().exec();
  ChatClient.java:19             : public ChatClient() {
      [1 insn w/o sources]
  ChatClient.java:20             : synchronized(getClass()) {
      [2 insn w/o sources]
  ChatClient.java:20             : synchronized(getClass()) {
  ChatClient.java:21             : id = currID++;
  ChatClient.java:22             : }
  ChatClient.java:23             : }
  ChatClient.java:16             : new ChatClient().exec();
  ChatClient.java:27             : Socket socket = new Socket();
      [10 insn w/o sources]
  ChatClient.java:27             : Socket socket = new Socket();
      [116 insn w/o sources]
  ChatClient.java:27             : Socket socket = new Socket();
  ChatClient.java:28             : InetSocketAddress addr = new InetSocketAddress("localhost", 4444);
      [20 insn w/o sources]
  ChatClient.java:28             : InetSocketAddress addr = new InetSocketAddress("localhost", 4444);
  ChatClient.java:29             : socket.connect(addr);
      [23 insn w/o sources]
------------------------------------------------------ transition #2 thread: 0
nas.java.net.choice.NasThreadChoice {id:"CONNECT" ,1/3,isCascaded:false}
      [3 insn w/o sources]
  ChatServer.java:88             : sock = servsock.accept();
  ChatServer.java:89             : Worker worker = null;
  ChatServer.java:91             : worker = new Worker(sock, this);
      [1 insn w/o sources]
  ChatServer.java:17             : class Worker implements Runnable {
      [2 insn w/o sources]
  ChatServer.java:17             : class Worker implements Runnable {
  ChatServer.java:1              : import java.io.BufferedReader;
  ChatServer.java:91             : worker = new Worker(sock, this);
  ChatServer.java:24             : public Worker(Socket s, ChatServer cs) throws IOException{
      [1 insn w/o sources]
  ChatServer.java:25             : chatServer = cs;
  ChatServer.java:26             : sock = s;
  ChatServer.java:28             : out = new PrintWriter(sock.getOutputStream(), true);
      [29 insn w/o sources]
  ChatServer.java:28             : out = new PrintWriter(sock.getOutputStream(), true);
      [270 insn w/o sources]
  ChatServer.java:28             : out = new PrintWriter(sock.getOutputStream(), true);
  ChatServer.java:29             : in = new BufferedReader(new
      [7 insn w/o sources]
  ChatServer.java:29             : in = new BufferedReader(new
      [8 insn w/o sources]
  ChatServer.java:29             : in = new BufferedReader(new
  ChatServer.java:30             : InputStreamReader(sock.getInputStream()));
      [29 insn w/o sources]
  ChatServer.java:30             : InputStreamReader(sock.getInputStream()));
      [23 insn w/o sources]
  ChatServer.java:30             : InputStreamReader(sock.getInputStream()));
      [48 insn w/o sources]
  ChatServer.java:30             : InputStreamReader(sock.getInputStream()));
  ChatServer.java:33             : }
  ChatServer.java:34             : }
  ChatServer.java:91             : worker = new Worker(sock, this);
  ChatServer.java:98             : }
  ChatServer.java:99             : if(init){
  ChatServer.java:100            : assert(init);
  ChatServer.java:102            : executor.execute(new Thread(worker));
      [145 insn w/o sources]
  ChatServer.java:102            : executor.execute(new Thread(worker));
  env/java/util/concurrent/ThreadPoolExecutor.java:29 : if(launchedThreads<maximumPoolSize){
  env/java/util/concurrent/ThreadPoolExecutor.java:32 : } else handler.rejectedExecution(r, this);
  ChatServer.java:80             : System.out.println("No more threads");
      [2 insn w/o sources]
  ChatServer.java:81             : }
  env/java/util/concurrent/ThreadPoolExecutor.java:33 : }
  ChatServer.java:104            : }
  ChatServer.java:87             : while (maxServ-- != 0) {
  ChatServer.java:88             : sock = servsock.accept();
      [130 insn w/o sources]
------------------------------------------------------ transition #3 thread: 1
nas.java.net.choice.NasThreadChoice {id:"BLOCKING_ACCEPT" ,1/2,isCascaded:false}
      [4 insn w/o sources]
  ChatClient.java:30             : System.out.println("Client " + id + " connected.");
      [2 insn w/o sources]
  ChatClient.java:30             : System.out.println("Client " + id + " connected.");
      [2 insn w/o sources]
  ChatClient.java:30             : System.out.println("Client " + id + " connected.");
      [2 insn w/o sources]
  ChatClient.java:30             : System.out.println("Client " + id + " connected.");
      [2 insn w/o sources]
  ChatClient.java:30             : System.out.println("Client " + id + " connected.");
      [2 insn w/o sources]
  ChatClient.java:30             : System.out.println("Client " + id + " connected.");
      [2 insn w/o sources]
  ChatClient.java:31             : InputStreamReader istr =
      [8 insn w/o sources]
  ChatClient.java:31             : InputStreamReader istr =
  ChatClient.java:32             : new InputStreamReader(socket.getInputStream());
      [29 insn w/o sources]
  ChatClient.java:32             : new InputStreamReader(socket.getInputStream());
      [23 insn w/o sources]
  ChatClient.java:32             : new InputStreamReader(socket.getInputStream());
  ChatClient.java:33             : BufferedReader in = new BufferedReader(istr);
      [7 insn w/o sources]
  ChatClient.java:33             : BufferedReader in = new BufferedReader(istr);
      [48 insn w/o sources]
  ChatClient.java:33             : BufferedReader in = new BufferedReader(istr);
  ChatClient.java:34             : OutputStreamWriter out =
      [8 insn w/o sources]
  ChatClient.java:34             : OutputStreamWriter out =
  ChatClient.java:35             : new OutputStreamWriter(socket.getOutputStream());
      [29 insn w/o sources]
  ChatClient.java:35             : new OutputStreamWriter(socket.getOutputStream());
      [17 insn w/o sources]
  ChatClient.java:35             : new OutputStreamWriter(socket.getOutputStream());
  ChatClient.java:36             : out.write(id + ": Hello, world!\n");
      [2 insn w/o sources]
  ChatClient.java:36             : out.write(id + ": Hello, world!\n");
      [2 insn w/o sources]
  ChatClient.java:36             : out.write(id + ": Hello, world!\n");
      [2 insn w/o sources]
  ChatClient.java:36             : out.write(id + ": Hello, world!\n");
      [2 insn w/o sources]
  ChatClient.java:36             : out.write(id + ": Hello, world!\n");
      [55 insn w/o sources]
  ChatClient.java:37             : out.flush();
      [1 insn w/o sources]
  ChatClient.java:38             : for (int i = 0; i < 1; i++) {
  ChatClient.java:39             : System.out.println(id + ": Received " + in.readLine());
      [2 insn w/o sources]
  ChatClient.java:39             : System.out.println(id + ": Received " + in.readLine());
      [2 insn w/o sources]
  ChatClient.java:39             : System.out.println(id + ": Received " + in.readLine());
      [2 insn w/o sources]
  ChatClient.java:39             : System.out.println(id + ": Received " + in.readLine());
      [77 insn w/o sources]
------------------------------------------------------ transition #4 thread: 2
nas.java.net.choice.NasThreadChoice {id:"BLOCKING_READ" ,1/1,isCascaded:false}
      [3168 insn w/o sources]
  ChatClient.java:13             : static int currID = 0;
  ChatClient.java:1              : /* $Id: ChatClient.java 723 2009-09-24 07:48:58Z cartho $ */
      [1 insn w/o sources]
  ChatClient.java:16             : new ChatClient().exec();
  ChatClient.java:19             : public ChatClient() {
      [1 insn w/o sources]
  ChatClient.java:20             : synchronized(getClass()) {
      [2 insn w/o sources]
  ChatClient.java:20             : synchronized(getClass()) {
  ChatClient.java:21             : id = currID++;
  ChatClient.java:22             : }
  ChatClient.java:23             : }
  ChatClient.java:16             : new ChatClient().exec();
  ChatClient.java:27             : Socket socket = new Socket();
      [10 insn w/o sources]
  ChatClient.java:27             : Socket socket = new Socket();
      [116 insn w/o sources]
  ChatClient.java:27             : Socket socket = new Socket();
  ChatClient.java:28             : InetSocketAddress addr = new InetSocketAddress("localhost", 4444);
      [20 insn w/o sources]
  ChatClient.java:28             : InetSocketAddress addr = new InetSocketAddress("localhost", 4444);
  ChatClient.java:29             : socket.connect(addr);
      [23 insn w/o sources]
------------------------------------------------------ transition #5 thread: 0
nas.java.net.choice.NasThreadChoice {id:"CONNECT" ,1/2,isCascaded:false}
      [3 insn w/o sources]
  ChatServer.java:88             : sock = servsock.accept();
  ChatServer.java:89             : Worker worker = null;
  ChatServer.java:91             : worker = new Worker(sock, this);
  ChatServer.java:24             : public Worker(Socket s, ChatServer cs) throws IOException{
      [1 insn w/o sources]
  ChatServer.java:25             : chatServer = cs;
  ChatServer.java:26             : sock = s;
  ChatServer.java:28             : out = new PrintWriter(sock.getOutputStream(), true);
      [29 insn w/o sources]
  ChatServer.java:28             : out = new PrintWriter(sock.getOutputStream(), true);
      [255 insn w/o sources]
  ChatServer.java:28             : out = new PrintWriter(sock.getOutputStream(), true);
  ChatServer.java:29             : in = new BufferedReader(new
  ChatServer.java:30             : InputStreamReader(sock.getInputStream()));
      [29 insn w/o sources]
  ChatServer.java:30             : InputStreamReader(sock.getInputStream()));
      [23 insn w/o sources]
  ChatServer.java:30             : InputStreamReader(sock.getInputStream()));
      [48 insn w/o sources]
  ChatServer.java:30             : InputStreamReader(sock.getInputStream()));
  ChatServer.java:33             : }
  ChatServer.java:34             : }
  ChatServer.java:91             : worker = new Worker(sock, this);
  ChatServer.java:98             : }
  ChatServer.java:99             : if(init){
  ChatServer.java:100            : assert(init);
  ChatServer.java:102            : executor.execute(new Thread(worker));
      [145 insn w/o sources]
  ChatServer.java:102            : executor.execute(new Thread(worker));
  env/java/util/concurrent/ThreadPoolExecutor.java:29 : if(launchedThreads<maximumPoolSize){
  env/java/util/concurrent/ThreadPoolExecutor.java:32 : } else handler.rejectedExecution(r, this);
  ChatServer.java:80             : System.out.println("No more threads");
      [2 insn w/o sources]
  ChatServer.java:81             : }
  env/java/util/concurrent/ThreadPoolExecutor.java:33 : }
  ChatServer.java:104            : }
  ChatServer.java:87             : while (maxServ-- != 0) {
  ChatServer.java:105            : servsock.close();
      [2 insn w/o sources]
  ChatServer.java:108            : }
  ChatServer.java:109            : System.out.println("Server shutting down.");
      [2 insn w/o sources]
  ChatServer.java:110            : executor.shutdown();
  env/java/util/concurrent/ThreadPoolExecutor.java:26 : public void shutdown() { } // stub
  ChatServer.java:111            : }
  ChatServer.java:117            : new ChatServer(Integer.parseInt(args[0]));
  ChatServer.java:119            : }
  ChatServer.java:3              : import java.io.InputStreamReader;
------------------------------------------------------ transition #6 thread: 2
gov.nasa.jpf.vm.choice.ThreadChoiceFromSet {id:"TERMINATE" ,1/1,isCascaded:false,attrs:[gov.nasa.jpf.vm.GlobalSchedulingPoint@5e57643e]}
      [4 insn w/o sources]
  ChatClient.java:30             : System.out.println("Client " + id + " connected.");
      [2 insn w/o sources]
  ChatClient.java:30             : System.out.println("Client " + id + " connected.");
      [2 insn w/o sources]
  ChatClient.java:30             : System.out.println("Client " + id + " connected.");
      [2 insn w/o sources]
  ChatClient.java:30             : System.out.println("Client " + id + " connected.");
      [2 insn w/o sources]
  ChatClient.java:30             : System.out.println("Client " + id + " connected.");
      [2 insn w/o sources]
  ChatClient.java:30             : System.out.println("Client " + id + " connected.");
      [2 insn w/o sources]
  ChatClient.java:31             : InputStreamReader istr =
      [8 insn w/o sources]
  ChatClient.java:31             : InputStreamReader istr =
  ChatClient.java:32             : new InputStreamReader(socket.getInputStream());
      [29 insn w/o sources]
  ChatClient.java:32             : new InputStreamReader(socket.getInputStream());
      [23 insn w/o sources]
  ChatClient.java:32             : new InputStreamReader(socket.getInputStream());
  ChatClient.java:33             : BufferedReader in = new BufferedReader(istr);
      [7 insn w/o sources]
  ChatClient.java:33             : BufferedReader in = new BufferedReader(istr);
      [48 insn w/o sources]
  ChatClient.java:33             : BufferedReader in = new BufferedReader(istr);
  ChatClient.java:34             : OutputStreamWriter out =
      [8 insn w/o sources]
  ChatClient.java:34             : OutputStreamWriter out =
  ChatClient.java:35             : new OutputStreamWriter(socket.getOutputStream());
      [29 insn w/o sources]
  ChatClient.java:35             : new OutputStreamWriter(socket.getOutputStream());
      [17 insn w/o sources]
  ChatClient.java:35             : new OutputStreamWriter(socket.getOutputStream());
  ChatClient.java:36             : out.write(id + ": Hello, world!\n");
      [2 insn w/o sources]
  ChatClient.java:36             : out.write(id + ": Hello, world!\n");
      [2 insn w/o sources]
  ChatClient.java:36             : out.write(id + ": Hello, world!\n");
      [2 insn w/o sources]
  ChatClient.java:36             : out.write(id + ": Hello, world!\n");
      [2 insn w/o sources]
  ChatClient.java:36             : out.write(id + ": Hello, world!\n");
      [55 insn w/o sources]
  ChatClient.java:37             : out.flush();
      [1 insn w/o sources]
  ChatClient.java:38             : for (int i = 0; i < 1; i++) {
  ChatClient.java:39             : System.out.println(id + ": Received " + in.readLine());
      [2 insn w/o sources]
  ChatClient.java:39             : System.out.println(id + ": Received " + in.readLine());
      [2 insn w/o sources]
  ChatClient.java:39             : System.out.println(id + ": Received " + in.readLine());
      [2 insn w/o sources]
  ChatClient.java:39             : System.out.println(id + ": Received " + in.readLine());
      [77 insn w/o sources]

====================================================== snapshot #1
thread java.lang.Thread:{id:1,name:main,status:WAITING,priority:5,isDaemon:false,lockCount:0,suspendCount:0}
  owned locks:java.io.InputStreamReader@4ae,java.lang.Object@4ad
  waiting on: java.lang.Object@434
  call stack:
	at java.net.SocketInputStream.read(SocketInputStream.java)
	at java.io.InputStreamReader.read(InputStreamReader.java:93)
	at java.io.BufferedReader.fill(BufferedReader.java:161)
	at java.io.BufferedReader.readLine(BufferedReader.java:324)
	at java.io.BufferedReader.readLine(BufferedReader.java:389)
	at ChatClient.exec(ChatClient.java:39)
	at ChatClient.main(ChatClient.java:16)

thread java.lang.Thread:{id:2,name:main,status:WAITING,priority:5,isDaemon:false,lockCount:0,suspendCount:0}
  owned locks:java.io.InputStreamReader@5b6,java.lang.Object@5b5
  waiting on: java.lang.Object@572
  call stack:
	at java.net.SocketInputStream.read(SocketInputStream.java)
	at java.io.InputStreamReader.read(InputStreamReader.java:93)
	at java.io.BufferedReader.fill(BufferedReader.java:161)
	at java.io.BufferedReader.readLine(BufferedReader.java:324)
	at java.io.BufferedReader.readLine(BufferedReader.java:389)
	at ChatClient.exec(ChatClient.java:39)
	at ChatClient.main(ChatClient.java:16)


====================================================== results
error #1: gov.nasa.jpf.vm.NotDeadlockedProperty "deadlock encountered:   thread java.lang.Thread:{i..."

====================================================== statistics
elapsed time:       00:00:00
states:             new=7,visited=0,backtracked=0,end=1
search:             maxDepth=7,constraints=0
choice generators:  thread=7 (signal=0,lock=1,sharedRef=0,threadApi=0,reschedule=1), data=0
heap:               new=1488,released=108,maxLive=1389,gcCycles=7
instructions:       12904
max memory:         241MB
loaded code:        classes=115,methods=5072

====================================================== search finished: 4/30/19 10:09 AM
