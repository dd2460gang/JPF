JavaPathfinder core system v8.0 (rev c4975b695986b352d3434c73ed638255158b5598) - (C) 2005-2014 United States Government. All rights reserved.


====================================================== system under test
DiningPhil.main()

====================================================== search started: 4/24/19 3:06 PM

====================================================== error 1
gov.nasa.jpf.vm.NotDeadlockedProperty
deadlock encountered:
  thread DiningPhil$Philosopher:{id:1,name:Thread-1,status:BLOCKED,priority:5,isDaemon:false,lockCount:0,suspendCount:0}
  thread DiningPhil$Philosopher:{id:2,name:Thread-2,status:BLOCKED,priority:5,isDaemon:false,lockCount:0,suspendCount:0}
  thread DiningPhil$Philosopher:{id:3,name:Thread-3,status:BLOCKED,priority:5,isDaemon:false,lockCount:0,suspendCount:0}
  thread DiningPhil$Philosopher:{id:4,name:Thread-4,status:BLOCKED,priority:5,isDaemon:false,lockCount:0,suspendCount:0}
  thread DiningPhil$Philosopher:{id:5,name:Thread-5,status:BLOCKED,priority:5,isDaemon:false,lockCount:0,suspendCount:0}


====================================================== trace #1
------------------------------------------------------ transition #0 thread: 0
gov.nasa.jpf.vm.choice.ThreadChoiceFromSet {id:"ROOT" ,1/1,isCascaded:false}
      [3168 insn w/o sources]
  DiningPhil.java:70             : Fork[] forks = new Fork[N];
  DiningPhil.java:71             : for (int i = 0; i < N; i++) {
  DiningPhil.java:72             : forks[i] = new Fork();
  DiningPhil.java:23             : static class Fork {
      [1 insn w/o sources]
  DiningPhil.java:24             : boolean lock = true;
  DiningPhil.java:72             : forks[i] = new Fork();
  DiningPhil.java:71             : for (int i = 0; i < N; i++) {
  DiningPhil.java:72             : forks[i] = new Fork();
  DiningPhil.java:23             : static class Fork {
      [1 insn w/o sources]
  DiningPhil.java:24             : boolean lock = true;
  DiningPhil.java:72             : forks[i] = new Fork();
  DiningPhil.java:71             : for (int i = 0; i < N; i++) {
  DiningPhil.java:72             : forks[i] = new Fork();
  DiningPhil.java:23             : static class Fork {
      [1 insn w/o sources]
  DiningPhil.java:24             : boolean lock = true;
  DiningPhil.java:72             : forks[i] = new Fork();
  DiningPhil.java:71             : for (int i = 0; i < N; i++) {
  DiningPhil.java:72             : forks[i] = new Fork();
  DiningPhil.java:23             : static class Fork {
      [1 insn w/o sources]
  DiningPhil.java:24             : boolean lock = true;
  DiningPhil.java:72             : forks[i] = new Fork();
  DiningPhil.java:71             : for (int i = 0; i < N; i++) {
  DiningPhil.java:72             : forks[i] = new Fork();
  DiningPhil.java:23             : static class Fork {
      [1 insn w/o sources]
  DiningPhil.java:24             : boolean lock = true;
  DiningPhil.java:72             : forks[i] = new Fork();
  DiningPhil.java:71             : for (int i = 0; i < N; i++) {
  DiningPhil.java:75             : new Philosopher(forks[i], forks[(i + 1) % N]);
      [1 insn w/o sources]
  DiningPhil.java:27             : static class Philosopher extends Thread {
      [2 insn w/o sources]
  DiningPhil.java:27             : static class Philosopher extends Thread {
  DiningPhil.java:1              : 
  DiningPhil.java:75             : new Philosopher(forks[i], forks[(i + 1) % N]);
  DiningPhil.java:32             : public Philosopher(Fork left, Fork right) {
      [145 insn w/o sources]
  DiningPhil.java:33             : this.left = left;
  DiningPhil.java:34             : this.right = right;
  DiningPhil.java:35             : start();
      [1 insn w/o sources]
------------------------------------------------------ transition #1 thread: 0
gov.nasa.jpf.vm.choice.ThreadChoiceFromSet {id:"START" ,1/2,isCascaded:false}
      [2 insn w/o sources]
  DiningPhil.java:36             : }
  DiningPhil.java:75             : new Philosopher(forks[i], forks[(i + 1) % N]);
  DiningPhil.java:74             : for (int i = 0; i < N; i++) {
  DiningPhil.java:75             : new Philosopher(forks[i], forks[(i + 1) % N]);
  DiningPhil.java:32             : public Philosopher(Fork left, Fork right) {
      [27 insn w/o sources]
------------------------------------------------------ transition #2 thread: 0
gov.nasa.jpf.vm.choice.ThreadChoiceFromSet {id:"LOCK" ,1/2,isCascaded:false}
      [119 insn w/o sources]
  DiningPhil.java:33             : this.left = left;
  DiningPhil.java:34             : this.right = right;
------------------------------------------------------ transition #3 thread: 0
gov.nasa.jpf.vm.choice.ThreadChoiceFromSet {id:"EXPOSE" ,1/2,isCascaded:false}
  DiningPhil.java:34             : this.right = right;
  DiningPhil.java:35             : start();
      [1 insn w/o sources]
------------------------------------------------------ transition #4 thread: 0
gov.nasa.jpf.vm.choice.ThreadChoiceFromSet {id:"START" ,1/3,isCascaded:false}
      [2 insn w/o sources]
  DiningPhil.java:36             : }
  DiningPhil.java:75             : new Philosopher(forks[i], forks[(i + 1) % N]);
  DiningPhil.java:74             : for (int i = 0; i < N; i++) {
  DiningPhil.java:75             : new Philosopher(forks[i], forks[(i + 1) % N]);
  DiningPhil.java:32             : public Philosopher(Fork left, Fork right) {
      [27 insn w/o sources]
------------------------------------------------------ transition #5 thread: 0
gov.nasa.jpf.vm.choice.ThreadChoiceFromSet {id:"LOCK" ,1/3,isCascaded:false}
      [119 insn w/o sources]
  DiningPhil.java:33             : this.left = left;
  DiningPhil.java:34             : this.right = right;
------------------------------------------------------ transition #6 thread: 0
gov.nasa.jpf.vm.choice.ThreadChoiceFromSet {id:"EXPOSE" ,1/3,isCascaded:false}
  DiningPhil.java:34             : this.right = right;
  DiningPhil.java:35             : start();
      [1 insn w/o sources]
------------------------------------------------------ transition #7 thread: 0
gov.nasa.jpf.vm.choice.ThreadChoiceFromSet {id:"START" ,1/4,isCascaded:false}
      [2 insn w/o sources]
  DiningPhil.java:36             : }
  DiningPhil.java:75             : new Philosopher(forks[i], forks[(i + 1) % N]);
  DiningPhil.java:74             : for (int i = 0; i < N; i++) {
  DiningPhil.java:75             : new Philosopher(forks[i], forks[(i + 1) % N]);
  DiningPhil.java:32             : public Philosopher(Fork left, Fork right) {
      [27 insn w/o sources]
------------------------------------------------------ transition #8 thread: 0
gov.nasa.jpf.vm.choice.ThreadChoiceFromSet {id:"LOCK" ,1/4,isCascaded:false}
      [119 insn w/o sources]
  DiningPhil.java:33             : this.left = left;
  DiningPhil.java:34             : this.right = right;
------------------------------------------------------ transition #9 thread: 0
gov.nasa.jpf.vm.choice.ThreadChoiceFromSet {id:"EXPOSE" ,1/4,isCascaded:false}
  DiningPhil.java:34             : this.right = right;
  DiningPhil.java:35             : start();
      [1 insn w/o sources]
------------------------------------------------------ transition #10 thread: 0
gov.nasa.jpf.vm.choice.ThreadChoiceFromSet {id:"START" ,1/5,isCascaded:false}
      [2 insn w/o sources]
  DiningPhil.java:36             : }
  DiningPhil.java:75             : new Philosopher(forks[i], forks[(i + 1) % N]);
  DiningPhil.java:74             : for (int i = 0; i < N; i++) {
  DiningPhil.java:75             : new Philosopher(forks[i], forks[(i + 1) % N]);
  DiningPhil.java:32             : public Philosopher(Fork left, Fork right) {
      [27 insn w/o sources]
------------------------------------------------------ transition #11 thread: 0
gov.nasa.jpf.vm.choice.ThreadChoiceFromSet {id:"LOCK" ,1/5,isCascaded:false}
      [119 insn w/o sources]
  DiningPhil.java:33             : this.left = left;
  DiningPhil.java:34             : this.right = right;
  DiningPhil.java:35             : start();
      [1 insn w/o sources]
------------------------------------------------------ transition #12 thread: 0
gov.nasa.jpf.vm.choice.ThreadChoiceFromSet {id:"START" ,1/6,isCascaded:false}
      [2 insn w/o sources]
  DiningPhil.java:36             : }
  DiningPhil.java:75             : new Philosopher(forks[i], forks[(i + 1) % N]);
  DiningPhil.java:74             : for (int i = 0; i < N; i++) {
  DiningPhil.java:77             : }
  DiningPhil.java:3              : // Copyright (C) 2006 United States Government as represented by the
------------------------------------------------------ transition #13 thread: 1
gov.nasa.jpf.vm.choice.ThreadChoiceFromSet {id:"TERMINATE" ,1/5,isCascaded:false}
      [1 insn w/o sources]
  DiningPhil.java:1              : 
  DiningPhil.java:40             : synchronized (left) {
------------------------------------------------------ transition #14 thread: 1
gov.nasa.jpf.vm.choice.ThreadChoiceFromSet {id:"LOCK" ,1/5,isCascaded:false}
  DiningPhil.java:40             : synchronized (left) {
  DiningPhil.java:41             : while(!left.lock){
  DiningPhil.java:46             : assert(left.lock);
  DiningPhil.java:47             : left.lock = false;
  DiningPhil.java:49             : synchronized (right) {
------------------------------------------------------ transition #15 thread: 2
gov.nasa.jpf.vm.choice.ThreadChoiceFromSet {id:"LOCK" ,2/5,isCascaded:false}
      [1 insn w/o sources]
  DiningPhil.java:1              : 
  DiningPhil.java:40             : synchronized (left) {
------------------------------------------------------ transition #16 thread: 2
gov.nasa.jpf.vm.choice.ThreadChoiceFromSet {id:"LOCK" ,2/5,isCascaded:false}
  DiningPhil.java:40             : synchronized (left) {
  DiningPhil.java:41             : while(!left.lock){
------------------------------------------------------ transition #17 thread: 2
gov.nasa.jpf.vm.choice.ThreadChoiceFromSet {id:"SHARED_OBJECT" ,1/4,isCascaded:false}
  DiningPhil.java:41             : while(!left.lock){
  DiningPhil.java:46             : assert(left.lock);
------------------------------------------------------ transition #18 thread: 2
gov.nasa.jpf.vm.choice.ThreadChoiceFromSet {id:"SHARED_OBJECT" ,1/4,isCascaded:false}
  DiningPhil.java:46             : assert(left.lock);
  DiningPhil.java:47             : left.lock = false;
------------------------------------------------------ transition #19 thread: 2
gov.nasa.jpf.vm.choice.ThreadChoiceFromSet {id:"SHARED_OBJECT" ,1/4,isCascaded:false}
  DiningPhil.java:47             : left.lock = false;
  DiningPhil.java:49             : synchronized (right) {
------------------------------------------------------ transition #20 thread: 3
gov.nasa.jpf.vm.choice.ThreadChoiceFromSet {id:"LOCK" ,2/4,isCascaded:false}
      [1 insn w/o sources]
  DiningPhil.java:1              : 
  DiningPhil.java:40             : synchronized (left) {
------------------------------------------------------ transition #21 thread: 3
gov.nasa.jpf.vm.choice.ThreadChoiceFromSet {id:"LOCK" ,2/4,isCascaded:false}
  DiningPhil.java:40             : synchronized (left) {
  DiningPhil.java:41             : while(!left.lock){
------------------------------------------------------ transition #22 thread: 3
gov.nasa.jpf.vm.choice.ThreadChoiceFromSet {id:"SHARED_OBJECT" ,1/3,isCascaded:false}
  DiningPhil.java:41             : while(!left.lock){
  DiningPhil.java:46             : assert(left.lock);
------------------------------------------------------ transition #23 thread: 3
gov.nasa.jpf.vm.choice.ThreadChoiceFromSet {id:"SHARED_OBJECT" ,1/3,isCascaded:false}
  DiningPhil.java:46             : assert(left.lock);
  DiningPhil.java:47             : left.lock = false;
------------------------------------------------------ transition #24 thread: 3
gov.nasa.jpf.vm.choice.ThreadChoiceFromSet {id:"SHARED_OBJECT" ,1/3,isCascaded:false}
  DiningPhil.java:47             : left.lock = false;
  DiningPhil.java:49             : synchronized (right) {
------------------------------------------------------ transition #25 thread: 4
gov.nasa.jpf.vm.choice.ThreadChoiceFromSet {id:"LOCK" ,2/3,isCascaded:false}
      [1 insn w/o sources]
  DiningPhil.java:1              : 
  DiningPhil.java:40             : synchronized (left) {
------------------------------------------------------ transition #26 thread: 4
gov.nasa.jpf.vm.choice.ThreadChoiceFromSet {id:"LOCK" ,2/3,isCascaded:false}
  DiningPhil.java:40             : synchronized (left) {
  DiningPhil.java:41             : while(!left.lock){
------------------------------------------------------ transition #27 thread: 4
gov.nasa.jpf.vm.choice.ThreadChoiceFromSet {id:"SHARED_OBJECT" ,1/2,isCascaded:false}
  DiningPhil.java:41             : while(!left.lock){
  DiningPhil.java:46             : assert(left.lock);
------------------------------------------------------ transition #28 thread: 4
gov.nasa.jpf.vm.choice.ThreadChoiceFromSet {id:"SHARED_OBJECT" ,1/2,isCascaded:false}
  DiningPhil.java:46             : assert(left.lock);
  DiningPhil.java:47             : left.lock = false;
------------------------------------------------------ transition #29 thread: 4
gov.nasa.jpf.vm.choice.ThreadChoiceFromSet {id:"SHARED_OBJECT" ,1/2,isCascaded:false}
  DiningPhil.java:47             : left.lock = false;
  DiningPhil.java:49             : synchronized (right) {
------------------------------------------------------ transition #30 thread: 5
gov.nasa.jpf.vm.choice.ThreadChoiceFromSet {id:"LOCK" ,2/2,isCascaded:false}
      [1 insn w/o sources]
  DiningPhil.java:1              : 
  DiningPhil.java:40             : synchronized (left) {
------------------------------------------------------ transition #31 thread: 5
gov.nasa.jpf.vm.choice.ThreadChoiceFromSet {id:"LOCK" ,2/2,isCascaded:false}
  DiningPhil.java:40             : synchronized (left) {
  DiningPhil.java:41             : while(!left.lock){
  DiningPhil.java:46             : assert(left.lock);
  DiningPhil.java:47             : left.lock = false;
  DiningPhil.java:49             : synchronized (right) {

====================================================== snapshot #1
thread DiningPhil$Philosopher:{id:1,name:Thread-1,status:BLOCKED,priority:5,isDaemon:false,lockCount:0,suspendCount:0}
  owned locks:DiningPhil$Fork@166
  blocked on: DiningPhil$Fork@167
  call stack:
	at DiningPhil$Philosopher.run(DiningPhil.java:49)

thread DiningPhil$Philosopher:{id:2,name:Thread-2,status:BLOCKED,priority:5,isDaemon:false,lockCount:0,suspendCount:0}
  owned locks:DiningPhil$Fork@167
  blocked on: DiningPhil$Fork@168
  call stack:
	at DiningPhil$Philosopher.run(DiningPhil.java:49)

thread DiningPhil$Philosopher:{id:3,name:Thread-3,status:BLOCKED,priority:5,isDaemon:false,lockCount:0,suspendCount:0}
  owned locks:DiningPhil$Fork@168
  blocked on: DiningPhil$Fork@169
  call stack:
	at DiningPhil$Philosopher.run(DiningPhil.java:49)

thread DiningPhil$Philosopher:{id:4,name:Thread-4,status:BLOCKED,priority:5,isDaemon:false,lockCount:0,suspendCount:0}
  owned locks:DiningPhil$Fork@169
  blocked on: DiningPhil$Fork@16a
  call stack:
	at DiningPhil$Philosopher.run(DiningPhil.java:49)

thread DiningPhil$Philosopher:{id:5,name:Thread-5,status:BLOCKED,priority:5,isDaemon:false,lockCount:0,suspendCount:0}
  owned locks:DiningPhil$Fork@16a
  blocked on: DiningPhil$Fork@166
  call stack:
	at DiningPhil$Philosopher.run(DiningPhil.java:49)


====================================================== results
error #1: gov.nasa.jpf.vm.NotDeadlockedProperty "deadlock encountered:   thread DiningPhil$Philosop..."

====================================================== statistics
elapsed time:       00:00:06
states:             new=32610,visited=79262,backtracked=111840,end=61
search:             maxDepth=70,constraints=0
choice generators:  thread=32609 (signal=1489,lock=8842,sharedRef=16685,threadApi=5,reschedule=5588), data=0
heap:               new=408,released=169703,maxLive=391,gcCycles=111872
instructions:       938870
max memory:         369MB
loaded code:        classes=65,methods=1484

====================================================== search finished: 4/24/19 